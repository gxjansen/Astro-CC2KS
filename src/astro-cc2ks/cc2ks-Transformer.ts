// In cc2ks-Transformer.ts

import type { ParsedConfig, ParsedCollection, SchemaField } from './cc2ks-Parser.js';

export function transformToKeystaticConfig(contentConfig: ParsedConfig): string {
  console.log('Transforming content config:', contentConfig);
  let keystaticConfig = `// @ts-nocheck
// This file is automatically generated. Do not modify it manually.

import { collection, fields } from '@keystatic/core';\n\n`;
  keystaticConfig += `export const generatedCollections = {\n`;

  for (const [collectionName, collection] of Object.entries(contentConfig.collections)) {
    console.log('Transforming collection:', collectionName, collection);
    keystaticConfig += `  ${collectionName}: collection({\n`;
    keystaticConfig += `    label: '${capitalizeFirstLetter(collectionName)}',\n`;
    if (collection.type === 'content') {
      keystaticConfig += `    type: 'content',\n`;
    }
    keystaticConfig += `    schema: {\n`;

    for (const [fieldName, field] of Object.entries(collection.schema)) {
      console.log('Transforming field:', fieldName, field);
      keystaticConfig += `      ${fieldName}: ${transformField(field)},\n`;
    }

    keystaticConfig += `    },\n`;
    keystaticConfig += `  }),\n`;
  }

  keystaticConfig += `};\n`;
  console.log('Generated Keystatic config:', keystaticConfig);
  return keystaticConfig;
}

function transformField(field: SchemaField): string {
  switch (field.type) {
    case 'string':
      return `fields.text({ label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`;
    case 'number':
      return `fields.number({ label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`;
    case 'boolean':
      return `fields.checkbox({ label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`;
    case 'date':
      return `fields.date({ label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`;
    case 'array':
      // This is a simplification. You might need to handle different array types
      return `fields.array(fields.text({ label: 'Item' }), { label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`;
    case 'object':
      if (field.fields) {
        return `fields.object({
          ${Object.entries(field.fields).map(([key, value]) => `${key}: ${transformField(value)}`).join(',\n          ')}
        }, { label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`;
      } else {
        return `fields.object({}, { label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`;
      }
    default:
      return `fields.text({ label: '${capitalizeFirstLetter(field.name)}' ${field.isOptional ? ', optional: true' : ''} })`; // Default to text field
  }
}

function capitalizeFirstLetter(string: string): string {
  return string.charAt(0).toUpperCase() + string.slice(1);
}